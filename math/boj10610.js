// 문제 : 30
// 입력된 숫자의 번호를 바꿔서 30의 배수가 되는 최댓값 출력
// 입력값은 10^5만큼의 길이로 구성되어 있으니 (최대 10만자) dfs는 무조건 메모리 초과

const solution = (even) => {
	const s = [...even].map(Number);

	if (!s.includes(0)) {
		console.log(-1);
		return;
	}

	s.sort((a, b) => b - a);
	const sum = s.reduce((a, c) => a + c, 0);

	console.log(sum % 3 === 0 ? s.join('') : -1);
};

solution('80875542');

/**

숫자 n에 대해 자릿수 합으로 판별 가능한 숫자들

1	항상 성립 (모든 수는 1의 배수)	의미 없음
2	❌ 불가능	짝수인지 봐야 함 (끝자리가 중요)
3	✅ 가능	자릿수 합이 3의 배수면 OK << 이게 핵심
4	❌ 불가능	마지막 두 자릿수 확인 필요
5	❌ 불가능	끝자리가 0 또는 5여야 함
6	❌ 불가능	2와 3의 배수 동시에 만족해야 함
9	✅ 가능	자릿수 합이 9의 배수면 OK
10	❌ 불가능	끝자리가 0이어야 함

 */

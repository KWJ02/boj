// 문제 : 이친수
// 이친수 : 0과 1로 이루어져 있지만, 무조건 1로 시작하며 연속된 1을 갖지 않는 수(11 x)
// 자릿수 n이 주어지면, n자리 숫자에서 이친수가 되는 수의 개수를 출력

// i = (i-1) + (i-2)
// 이전 경우의 수에서 0을 붙이거나, 1을 붙이는 경우만 존재.
// 0을 붙일때는 i-1의 모든 경우에 0을 붙이면되나, 1을 붙일때는 i-1의 모든 경우에 1을 붙일 경우 11이 발생할 수 있으므로
// i-2의 모든 경우에 01을 붙여야함

const solution = (n) => {
	const dp = [0, 1, 1, 2];

	if (n < 4) {
		console.log(dp[n]);
		return 0;
	} else {
		for (let i = 4; i <= n; i++) {
			dp[i] = BigInt(dp[i - 1]) + BigInt(dp[i - 2]);
		}

		console.log(String(dp[n]));
	}
};

solution(5);
